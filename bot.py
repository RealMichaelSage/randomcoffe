import os
import logging
import random
import fcntl
import sys
from datetime import datetime, timedelta
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Poll, Bot, ReplyKeyboardMarkup, KeyboardButton, ChatMemberUpdated, Chat
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes, ConversationHandler, ChatMemberHandler, PollAnswerHandler
from sqlalchemy import create_engine, func
from sqlalchemy.orm import sessionmaker
from database import Base, User, UserPreferences, Meeting, Rating, WeeklyPoll, PollResponse, Chat, BotInstance
import uuid

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
load_dotenv(override=True)

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
if not TELEGRAM_BOT_TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN not found in environment variables")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL = os.getenv('DATABASE_URL', 'sqlite:///random_coffee.db')

# –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
engine = create_engine(DATABASE_URL)

# –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
Base.metadata.create_all(engine)

# –°–æ–∑–¥–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É —Å–µ—Å—Å–∏–π
Session = sessionmaker(bind=engine)


def get_session():
    """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    session = Session()
    try:
        yield session
    finally:
        session.close()


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Bot restart - 2024-04-01 - Fix database initialization and user handling

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
(
    ENTER_NAME,
    ENTER_CITY,
    ENTER_SOCIAL_LINK,
    ENTER_ABOUT,
    ENTER_JOB,
    ENTER_BIRTH_DATE,
    ENTER_AVATAR,
    ENTER_HOBBIES,
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    SETTINGS_CITY,
    SETTINGS_SOCIAL_LINK,
    SETTINGS_ABOUT,
    SETTINGS_JOB,
    SETTINGS_BIRTH_DATE,
    SETTINGS_AVATAR,
    SETTINGS_HOBBIES,
    SETTINGS_VISIBILITY
) = range(16)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á
active_meetings = {}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    chat = update.effective_chat
    session = next(get_session())

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á–∞—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_chat = session.query(Chat).filter_by(chat_id=chat.id).first()
        if not db_chat:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ —á–∞—Ç–µ
            db_chat = Chat(
                chat_id=chat.id,
                title=chat.title or str(chat.id),
                is_active=True,
                joined_at=datetime.utcnow()
            )
            session.add(db_chat)
            session.commit()

            keyboard = [
                [
                    InlineKeyboardButton(
                        "üë§ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data='register'),
                    InlineKeyboardButton(
                        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='settings')
                ],
                [
                    InlineKeyboardButton(
                        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats'),
                    InlineKeyboardButton("‚ùì FAQ", callback_data='faq')
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–æ—Ñ–µ-–≤—Å—Ç—Ä–µ—á. "
                "–Ø –ø–æ–º–æ–≥—É –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏ –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ —á–∞—Ç–∞. "
                "–ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é —è –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫—Ç–æ —Ö–æ—á–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å "
                "–≤–æ –≤—Å—Ç—Ä–µ—á–∞—Ö –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ.\n\n"
                "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
                "/stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
                "/settings - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è",
                reply_markup=reply_markup
            )
        else:
            keyboard = [
                [
                    InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data='profile'),
                    InlineKeyboardButton(
                        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='settings')
                ],
                [
                    InlineKeyboardButton(
                        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats'),
                    InlineKeyboardButton("‚ùì FAQ", callback_data='faq')
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                "–Ø —É–∂–µ —Ä–∞–±–æ—Ç–∞—é –≤ —ç—Ç–æ–º —á–∞—Ç–µ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
                reply_markup=reply_markup
            )
    except Exception as e:
        logger.error(f"Error in start command: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–∞—Ç–∞.")
    finally:
        session.close()


async def register(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    query = update.callback_query
    await query.answer()

    session = next(get_session())
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        existing_user = session.query(User).filter(
            User.telegram_id == query.from_user.id).first()

        if existing_user:
            keyboard = [
                [
                    InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data='profile'),
                    InlineKeyboardButton(
                        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='settings')
                ],
                [
                    InlineKeyboardButton(
                        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats'),
                    InlineKeyboardButton("‚ùì FAQ", callback_data='faq')
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.message.reply_text(
                "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–º:",
                reply_markup=reply_markup
            )
            return ConversationHandler.END

        await query.message.reply_text(
            "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n"
            "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? (–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è)"
        )
        return ENTER_NAME
    except Exception as e:
        logger.error(f"Error in register: {e}")
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return ConversationHandler.END
    finally:
        session.close()


async def enter_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
    context.user_data['name'] = update.message.text
    await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –∂–∏–≤–µ—Ç–µ?")
    return ENTER_CITY


async def enter_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞"""
    context.user_data['city'] = update.message.text
    await update.message.reply_text(
        "–£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à—É —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, VK, Instagram, LinkedIn):"
    )
    return ENTER_SOCIAL_LINK


async def enter_social_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ—Ü.—Å–µ—Ç—å"""
    context.user_data['social_link'] = update.message.text
    await update.message.reply_text(
        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ:"
    )
    return ENTER_ABOUT


async def enter_about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ"""
    context.user_data['about'] = update.message.text
    await update.message.reply_text(
        "–ö–µ–º –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?"
    )
    return ENTER_JOB


async def enter_job(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏"""
    context.user_data['job'] = update.message.text
    await update.message.reply_text(
        "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):"
    )
    return ENTER_BIRTH_DATE


async def enter_birth_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
    try:
        birth_date = datetime.strptime(update.message.text, "%d.%m.%Y")
        context.user_data['birth_date'] = birth_date
        await update.message.reply_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞:"
        )
        return ENTER_AVATAR
    except ValueError:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–î–î.–ú–ú.–ì–ì–ì–ì):"
        )
        return ENTER_BIRTH_DATE


async def enter_avatar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞"""
    if update.message.photo:
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ (—Å–∞–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ) —Ñ–æ—Ç–æ
        photo = update.message.photo[-1]
        context.user_data['avatar'] = photo.file_id
        await update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–∏—Ö —Ö–æ–±–±–∏ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö:"
        )
        return ENTER_HOBBIES
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é:"
        )
        return ENTER_AVATAR


async def enter_hobbies(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    context.user_data['hobbies'] = update.message.text
    session = next(get_session())

    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User(
            telegram_id=update.effective_user.id,
            username=update.effective_user.username,
            nickname=context.user_data['name'],
            city=context.user_data['city'],
            social_link=context.user_data['social_link'],
            about=context.user_data['about'],
            job=context.user_data['job'],
            birth_date=context.user_data['birth_date'],
            avatar=context.user_data['avatar'],
            hobbies=context.user_data['hobbies'],
            created_at=datetime.utcnow()
        )
        session.add(user)
        session.commit()

        profile_text = (
            "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
            f"üë§ –ò–º—è: {context.user_data['name']}\n"
            f"üèô –ì–æ—Ä–æ–¥: {context.user_data['city']}\n"
            f"üîó –°–æ—Ü.—Å–µ—Ç—å: {context.user_data['social_link']}\n"
            f"‚ÑπÔ∏è –û —Å–µ–±–µ: {context.user_data['about']}\n"
            f"üíº –†–∞–±–æ—Ç–∞: {context.user_data['job']}\n"
            f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {context.user_data['birth_date'].strftime('%d.%m.%Y')}\n"
            f"üéØ –•–æ–±–±–∏: {context.user_data['hobbies']}"
        )

        keyboard = [
            [
                InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data='profile'),
                InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='settings')
            ],
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats'),
                InlineKeyboardButton("‚ùì FAQ", callback_data='faq')
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä —Å –ø—Ä–æ—Ñ–∏–ª–µ–º
        if context.user_data.get('avatar'):
            await update.message.reply_photo(
                photo=context.user_data['avatar'],
                caption=profile_text,
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(profile_text, reply_markup=reply_markup)

        return ConversationHandler.END
    except Exception as e:
        logger.error(f"Error in enter_hobbies: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.")
        return ConversationHandler.END
    finally:
        session.close()


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    session = next(get_session())

    try:
        if query.data == 'register':
            await register(update, context)
        elif query.data == 'profile':
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            user = session.query(User).filter(
                User.telegram_id == query.from_user.id).first()
            if user:
                profile_text = (
                    "üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
                    f"üë§ –ò–º—è: {user.nickname}\n"
                    f"üìÖ –í–æ–∑—Ä–∞—Å—Ç: {user.age}\n"
                    f"‚öß –ü–æ–ª: {user.gender}\n"
                    f"üíº –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {user.profession}\n"
                    f"üéØ –ò–Ω—Ç–µ—Ä–µ—Å—ã: {user.interests}\n"
                    f"üó£ –Ø–∑—ã–∫ –æ–±—â–µ–Ω–∏—è: {user.language}\n"
                    f"üïí –£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è: {user.meeting_time}\n"
                    f"üìÜ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at.strftime('%d.%m.%Y')}"
                )
            else:
                profile_text = "üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å."

            await query.message.reply_text(profile_text)
        elif query.data == 'settings':
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = session.query(User).filter(
                User.telegram_id == query.from_user.id).first()
            if not user:
                await query.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
                return

            preferences = session.query(UserPreferences).filter(
                UserPreferences.user_id == user.id).first()

            keyboard = [
                [
                    InlineKeyboardButton(
                        "üèô –ì–æ—Ä–æ–¥", callback_data='settings_city'),
                    InlineKeyboardButton(
                        "üîó –°–æ—Ü.—Å–µ—Ç—å", callback_data='settings_social_link')
                ],
                [
                    InlineKeyboardButton(
                        "‚ÑπÔ∏è –û —Å–µ–±–µ", callback_data='settings_about'),
                    InlineKeyboardButton(
                        "üíº –†–∞–±–æ—Ç–∞", callback_data='settings_job')
                ],
                [
                    InlineKeyboardButton(
                        "üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", callback_data='settings_birth_date'),
                    InlineKeyboardButton(
                        "üñº –ê–≤–∞—Ç–∞—Ä", callback_data='settings_avatar')
                ],
                [
                    InlineKeyboardButton(
                        "üéØ –•–æ–±–±–∏", callback_data='settings_hobbies'),
                    InlineKeyboardButton(
                        "üëÅ –í–∏–¥–∏–º–æ—Å—Ç—å", callback_data='settings_visibility')
                ],
                [
                    InlineKeyboardButton(
                        "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            settings_text = (
                "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:\n\n"
                f"üèô –ì–æ—Ä–æ–¥: {user.city or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üîó –°–æ—Ü.—Å–µ—Ç—å: {user.social_link or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
                f"‚ÑπÔ∏è –û —Å–µ–±–µ: {user.about or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"üíº –†–∞–±–æ—Ç–∞: {user.job or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
                f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user.birth_date.strftime('%d.%m.%Y') if user.birth_date else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
                f"üéØ –•–æ–±–±–∏: {user.hobbies or '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}\n"
                f"üëÅ –í–∏–¥–∏–º–æ—Å—Ç—å: {'–ü—É–±–ª–∏—á–Ω—ã–π' if user.is_visible else '–ü—Ä–∏–≤–∞—Ç–Ω—ã–π'}"
            )

            await query.message.reply_text(settings_text, reply_markup=reply_markup)
            return ConversationHandler.END
        elif query.data.startswith('set_'):
            # –ø–æ–ª—É—á–∞–µ–º —Ç–∏–ø –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (gender, age, language –∏ —Ç.–¥.)
            setting_type = query.data[4:]
            await handle_settings(update, context, setting_type)
        elif query.data == 'reset_settings':
            await reset_settings(update, context)
        elif query.data == 'stats':
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = session.query(User).filter(
                User.telegram_id == query.from_user.id).first()
            if user:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤—Å—Ç—Ä–µ—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                total_meetings = len(user.meetings_as_user1) + \
                    len(user.meetings_as_user2)
                completed_meetings = session.query(Meeting).filter(
                    ((Meeting.user1_id == user.id) | (Meeting.user2_id == user.id)) &
                    (Meeting.status == 'completed')
                ).count()

                # –ü–æ–ª—É—á–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
                ratings = session.query(Rating).filter(
                    Rating.to_user_id == user.id).all()
                avg_rating = sum([r.rating for r in ratings]) / \
                    len(ratings) if ratings else 0

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞
                experience_level = "üå± –ù–æ–≤–∏—á–æ–∫"
                if total_meetings >= 10:
                    experience_level = "üåø –†–µ–≥—É–ª—è—Ä"
                if total_meetings >= 20:
                    experience_level = "üå≥ –≠–∫—Å–ø–µ—Ä—Ç"

                stats_text = (
                    "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
                    f"üë• –í—Å–µ–≥–æ –≤—Å—Ç—Ä–µ—á: {total_meetings}\n"
                    f"‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á: {completed_meetings}\n"
                    f"‚≠êÔ∏è –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {avg_rating:.1f}\n"
                    f"üìà –£—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞: {experience_level}\n"
                    f"üìÖ –í –∫–ª—É–±–µ —Å: {user.created_at.strftime('%d.%m.%Y')}\n\n"
                    "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n"
                )

                # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                if total_meetings >= 1:
                    stats_text += "üéØ –ü–µ—Ä–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞\n"
                if total_meetings >= 5:
                    stats_text += "üî• 5 –≤—Å—Ç—Ä–µ—á\n"
                if total_meetings >= 10:
                    stats_text += "üí´ 10 –≤—Å—Ç—Ä–µ—á\n"
                if total_meetings >= 20:
                    stats_text += "üåü 20 –≤—Å—Ç—Ä–µ—á\n"
                if avg_rating >= 4.5:
                    stats_text += "‚≠êÔ∏è –û—Ç–ª–∏—á–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫\n"

            else:
                stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å."

            await query.message.reply_text(stats_text)
    except Exception as e:
        logger.error(f"Error in button_handler: {e}")
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")


async def create_weekly_poll(context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–∑–¥–∞–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ–ø—Ä–æ—Å"""
    session = next(get_session())
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã
        active_chats = session.query(Chat).filter_by(is_active=True).all()

        for chat in active_chats:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–ø—Ä–æ—Å –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
            week_start = datetime.utcnow()
            week_end = week_start + timedelta(days=7)

            poll = WeeklyPoll(
                chat_id=chat.id,
                week_start=week_start,
                week_end=week_end,
                status='active',
                created_at=datetime.utcnow()
            )
            session.add(poll)
            session.commit()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø—Ä–æ—Å –≤ —á–∞—Ç
            message = await context.bot.send_poll(
                chat_id=chat.chat_id,
                question="–ü—Ä–∏–≤–µ—Ç! –ë—É–¥–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤–æ –≤—Å—Ç—Ä–µ—á–∞—Ö Random Coffee –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ? ‚òïÔ∏è",
                options=["–î–∞", "–ù–µ—Ç"],
                is_anonymous=False
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
            poll.message_id = message.message_id
            session.commit()
    except Exception as e:
        logger.error(f"Error sending poll to chat: {e}")


async def distribute_pairs(context: ContextTypes.DEFAULT_TYPE):
    """–†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–∞—Ä—ã –¥–ª—è –≤—Å—Ç—Ä–µ—á"""
    session = next(get_session())
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã
        active_chats = session.query(Chat).filter_by(is_active=True).all()

        for chat in active_chats:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–ø—Ä–æ—Å –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
            latest_poll = session.query(WeeklyPoll)\
                .filter_by(chat_id=chat.id)\
                .order_by(WeeklyPoll.created_at.desc())\
                .first()

            if not latest_poll:
                continue

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
            positive_responses = session.query(PollResponse)\
                .filter_by(poll_id=latest_poll.id, response=True)\
                .all()

            # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≥–æ—Ç–æ–≤—ã—Ö –∫ –≤—Å—Ç—Ä–µ—á–µ
            user_ids = [response.user_id for response in positive_responses]

            if len(user_ids) < 2:
                await context.bot.send_message(
                    chat_id=chat.chat_id,
                    text="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ."
                )
                continue

            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤—Å—Ç—Ä–µ—á
            past_meetings = session.query(Meeting)\
                .filter(Meeting.user1_id.in_(user_ids))\
                .filter(Meeting.user2_id.in_(user_ids))\
                .all()

            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –ø—Ä–æ—à–ª—ã—Ö –≤—Å—Ç—Ä–µ—á
            meeting_history = {}
            for meeting in past_meetings:
                if meeting.user1_id not in meeting_history:
                    meeting_history[meeting.user1_id] = set()
                if meeting.user2_id not in meeting_history:
                    meeting_history[meeting.user2_id] = set()
                meeting_history[meeting.user1_id].add(meeting.user2_id)
                meeting_history[meeting.user2_id].add(meeting.user1_id)

            # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            random.shuffle(user_ids)

            # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—ã —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏ –≤—Å—Ç—Ä–µ—á
            pairs = []
            unpaired = []
            used = set()

            for user1 in user_ids:
                if user1 in used:
                    continue

                # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
                best_partner = None
                min_meetings = float('inf')

                for user2 in user_ids:
                    if user2 == user1 or user2 in used:
                        continue

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤—Å—Ç—Ä–µ—á
                    meetings_count = len(meeting_history.get(
                        user1, set()).intersection({user2}))

                    if meetings_count < min_meetings:
                        min_meetings = meetings_count
                        best_partner = user2

                    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å –∫–æ—Ç–æ—Ä—ã–º –≤—Å—Ç—Ä–µ—á –Ω–µ –±—ã–ª–æ, —Å—Ä–∞–∑—É –±–µ—Ä–µ–º –µ–≥–æ
                    if meetings_count == 0:
                        break

                if best_partner:
                    pairs.append((user1, best_partner))
                    used.add(user1)
                    used.add(best_partner)
                else:
                    unpaired.append(user1)

            # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –Ω–µ–ø–∞—Ä–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–∞—Ä–µ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
            if unpaired:
                if pairs:
                    last_pair = pairs[-1]
                    pairs[-1] = (last_pair[0], last_pair[1], unpaired[0])
                else:
                    # –ï—Å–ª–∏ –ø–∞—Ä –Ω–µ—Ç —Å–æ–≤—Å–µ–º, —Å–æ–∑–¥–∞–µ–º –æ–¥–Ω—É –∏–∑ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è
                    pairs.append(tuple(unpaired))

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = "üéâ –ü–∞—Ä—ã –¥–ª—è –≤—Å—Ç—Ä–µ—á –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é:\n\n"

            for pair in pairs:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
                users = []
                for user_id in pair:
                    user = session.query(User).filter_by(id=user_id).first()
                    if user:
                        if user.username:
                            users.append(f"@{user.username}")
                        else:
                            users.append(
                                f"[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å](tg://user?id={user.telegram_id})")

                # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
                message += "üë• " + " –∏ ".join(users) + "\n"

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å—Ç—Ä–µ—á—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                if len(pair) == 2:
                    user1, user2 = pair
                    meeting = Meeting(
                        user1_id=user1,
                        user2_id=user2,
                        scheduled_time=datetime.utcnow(),
                        status='scheduled',
                        created_at=datetime.utcnow()
                    )
                    session.add(meeting)
                elif len(pair) == 3:
                    user1, user2, user3 = pair
                    meeting1 = Meeting(
                        user1_id=user1,
                        user2_id=user2,
                        scheduled_time=datetime.utcnow(),
                        status='scheduled',
                        created_at=datetime.utcnow()
                    )
                    meeting2 = Meeting(
                        user1_id=user2,
                        user2_id=user3,
                        scheduled_time=datetime.utcnow(),
                        status='scheduled',
                        created_at=datetime.utcnow()
                    )
                    meeting3 = Meeting(
                        user1_id=user1,
                        user2_id=user3,
                        scheduled_time=datetime.utcnow(),
                        status='scheduled',
                        created_at=datetime.utcnow()
                    )
                    session.add(meeting1)
                    session.add(meeting2)
                    session.add(meeting3)

            message += "\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–≥–æ–≤–æ—Ä–∏—Ç–µ—Å—å –æ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–µ –≤—Å—Ç—Ä–µ—á–∏ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö üòä"

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            session.commit()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —á–∞—Ç
            await context.bot.send_message(
                chat_id=chat.chat_id,
                text=message,
                parse_mode='Markdown'
            )
    except Exception as e:
        logger.error(f"Error creating pairs for chat: {e}")
    finally:
        session.close()


async def handle_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    query = update.callback_query
    setting_type = query.data[4:]

    if setting_type == 'gender':
        keyboard = [
            [KeyboardButton("–ú—É–∂—Å–∫–æ–π"), KeyboardButton("–ñ–µ–Ω—Å–∫–∏–π")],
            [KeyboardButton("–õ—é–±–æ–π")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –ø–æ–ª —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:", reply_markup=reply_markup)
        return SETTINGS_GENDER

    elif setting_type == 'age':
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ (–æ—Ç 18):")
        return SETTINGS_AGE_MIN

    elif setting_type == 'language':
        keyboard = [
            [KeyboardButton("–†—É—Å—Å–∫–∏–π"), KeyboardButton("English")],
            [KeyboardButton("–†—É—Å—Å–∫–∏–π + English"), KeyboardButton("–õ—é–±–æ–π")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —è–∑—ã–∫ –æ–±—â–µ–Ω–∏—è:", reply_markup=reply_markup)
        return SETTINGS_LANGUAGE

    elif setting_type == 'interests':
        await query.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å —Ç–µ–º—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n"
            "(–Ω–∞–ø—Ä–∏–º–µ—Ä: –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, —Å–ø–æ—Ä—Ç, –º—É–∑—ã–∫–∞)\n"
            "–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–õ—é–±—ã–µ':"
        )
        return SETTINGS_INTERESTS

    elif setting_type == 'time':
        keyboard = [
            [KeyboardButton("–£—Ç—Ä–æ"), KeyboardButton("–î–µ–Ω—å")],
            [KeyboardButton("–í–µ—á–µ—Ä"), KeyboardButton("–õ—é–±–æ–µ –≤—Ä–µ–º—è")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≤—Å—Ç—Ä–µ—á:", reply_markup=reply_markup)
        return SETTINGS_TIME


async def reset_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    user = next(get_session()).query(User).filter(
        User.telegram_id == query.from_user.id).first()
    if user:
        preferences = next(get_session()).query(UserPreferences).filter(
            UserPreferences.user_id == user.id).first()
        if preferences:
            next(get_session()).delete(preferences)
            next(get_session()).commit()
            await query.message.reply_text("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã!")
        else:
            await query.message.reply_text("‚ÑπÔ∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
    else:
        await query.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")


async def save_gender_preference(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–≥–æ –ø–æ–ª–∞"""
    user = next(get_session()).query(User).filter(User.telegram_id ==
                                                  update.effective_user.id).first()
    if not user:
        await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
        return ConversationHandler.END

    preferences = next(get_session()).query(UserPreferences).filter(
        UserPreferences.user_id == user.id).first()
    if not preferences:
        preferences = UserPreferences(user_id=user.id)
        next(get_session()).add(preferences)

    preferences.preferred_gender = update.message.text
    next(get_session()).commit()

    await update.message.reply_text(f"‚úÖ –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –ø–æ–ª —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {update.message.text}")
    return ConversationHandler.END


async def save_age_min_preference(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    try:
        age = int(update.message.text)
        if age < 18 or age > 100:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 18 –¥–æ 100)")
            return SETTINGS_AGE_MIN

        context.user_data['min_age'] = age
        await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:")
        return SETTINGS_AGE_MAX
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return SETTINGS_AGE_MIN


async def save_age_max_preference(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    try:
        age = int(update.message.text)
        min_age = context.user_data.get('min_age', 18)

        if age < min_age or age > 100:
            await update.message.reply_text(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç {min_age} –¥–æ 100)")
            return SETTINGS_AGE_MAX

        user = next(get_session()).query(User).filter(User.telegram_id ==
                                                      update.effective_user.id).first()
        if not user:
            await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
            return ConversationHandler.END

        preferences = next(get_session()).query(UserPreferences).filter(
            UserPreferences.user_id == user.id).first()
        if not preferences:
            preferences = UserPreferences(user_id=user.id)
            next(get_session()).add(preferences)

        preferences.age_range_min = min_age
        preferences.age_range_max = age
        next(get_session()).commit()

        await update.message.reply_text(
            f"‚úÖ –í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {min_age}-{age} –ª–µ—Ç"
        )
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return SETTINGS_AGE_MAX


async def save_language_preference(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–≥–æ —è–∑—ã–∫–∞"""
    user = next(get_session()).query(User).filter(User.telegram_id ==
                                                  update.effective_user.id).first()
    if not user:
        await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
        return ConversationHandler.END

    preferences = next(get_session()).query(UserPreferences).filter(
        UserPreferences.user_id == user.id).first()
    if not preferences:
        preferences = UserPreferences(user_id=user.id)
        next(get_session()).add(preferences)

    preferences.preferred_languages = update.message.text
    next(get_session()).commit()

    await update.message.reply_text(f"‚úÖ –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —è–∑—ã–∫ –æ–±—â–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {update.message.text}")
    return ConversationHandler.END


async def save_interests_preference(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
    user = next(get_session()).query(User).filter(User.telegram_id ==
                                                  update.effective_user.id).first()
    if not user:
        await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
        return ConversationHandler.END

    preferences = next(get_session()).query(UserPreferences).filter(
        UserPreferences.user_id == user.id).first()
    if not preferences:
        preferences = UserPreferences(user_id=user.id)
        next(get_session()).add(preferences)

    preferences.preferred_interests = update.message.text
    next(get_session()).commit()

    await update.message.reply_text(f"‚úÖ –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {update.message.text}")
    return ConversationHandler.END


async def save_time_preference(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    user = next(get_session()).query(User).filter(User.telegram_id ==
                                                  update.effective_user.id).first()
    if not user:
        await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
        return ConversationHandler.END

    preferences = next(get_session()).query(UserPreferences).filter(
        UserPreferences.user_id == user.id).first()
    if not preferences:
        preferences = UserPreferences(user_id=user.id)
        next(get_session()).add(preferences)

    preferences.preferred_meeting_times = update.message.text
    next(get_session()).commit()

    await update.message.reply_text(f"‚úÖ –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–µ –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {update.message.text}")
    return ConversationHandler.END


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é"""
    help_text = (
        "ü§ñ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/stats - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\n"
        "‚ÑπÔ∏è –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n"
        "1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'\n"
        "2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'\n"
        "3. –ö–∞–∂–¥—É—é –ø—è—Ç–Ω–∏—Ü—É –±–æ—Ç —Å–æ–∑–¥–∞–µ—Ç –æ–ø—Ä–æ—Å –¥–ª—è —É—á–∞—Å—Ç–∏—è\n"
        "4. –í –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è –ø–∞—Ä—ã –¥–ª—è –≤—Å—Ç—Ä–µ—á\n"
        "5. –ü–æ—Å–ª–µ –≤—Å—Ç—Ä–µ—á–∏ –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤\n\n"
        "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n"
        "- –ü—è—Ç–Ω–∏—Ü–∞ 18:00 - –û–ø—Ä–æ—Å –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é\n"
        "- –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 10:00 - –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä\n\n"
        "‚ùì –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É FAQ"
    )
    await update.message.reply_text(help_text)


async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = next(get_session()).query(User).filter(User.telegram_id ==
                                                  update.effective_user.id).first()
    if user:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤—Å—Ç—Ä–µ—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        total_meetings = len(user.meetings_as_user1) + \
            len(user.meetings_as_user2)
        completed_meetings = next(get_session()).query(Meeting).filter(
            ((Meeting.user1_id == user.id) | (Meeting.user2_id == user.id)) &
            (Meeting.status == 'completed')
        ).count()

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
        ratings = next(get_session()).query(Rating).filter(
            Rating.to_user_id == user.id).all()
        avg_rating = sum([r.rating for r in ratings]) / \
            len(ratings) if ratings else 0

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞
        experience_level = "üå± –ù–æ–≤–∏—á–æ–∫"
        if total_meetings >= 10:
            experience_level = "üåø –†–µ–≥—É–ª—è—Ä"
        if total_meetings >= 20:
            experience_level = "üå≥ –≠–∫—Å–ø–µ—Ä—Ç"

        stats_text = (
            "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            f"üë• –í—Å–µ–≥–æ –≤—Å—Ç—Ä–µ—á: {total_meetings}\n"
            f"‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á: {completed_meetings}\n"
            f"‚≠êÔ∏è –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {avg_rating:.1f}\n"
            f"üìà –£—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞: {experience_level}\n"
            f"üìÖ –í –∫–ª—É–±–µ —Å: {user.created_at.strftime('%d.%m.%Y')}\n\n"
            "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        if total_meetings >= 1:
            stats_text += "üéØ –ü–µ—Ä–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞\n"
        if total_meetings >= 5:
            stats_text += "üî• 5 –≤—Å—Ç—Ä–µ—á\n"
        if total_meetings >= 10:
            stats_text += "üí´ 10 –≤—Å—Ç—Ä–µ—á\n"
        if total_meetings >= 20:
            stats_text += "üåü 20 –≤—Å—Ç—Ä–µ—á\n"
        if avg_rating >= 4.5:
            stats_text += "‚≠êÔ∏è –û—Ç–ª–∏—á–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫\n"

    else:
        stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å."

    await update.message.reply_text(stats_text)


async def handle_poll_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ–ø—Ä–æ—Å—ã"""
    answer = update.poll_answer
    user_id = answer.user.id
    poll_id = answer.poll_id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–ø—Ä–æ—Å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    poll = next(get_session()).query(WeeklyPoll).filter(
        WeeklyPoll.message_id == poll_id).first()
    if not poll:
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞
    selected_option = answer.option_ids[0] if answer.option_ids else None
    if selected_option is None:
        return

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    response_text = ["–î–∞", "–ù–µ—Ç", "–ü–æ–∫–∞ —á—Ç–æ –Ω–µ –∑–Ω–∞—é"][selected_option]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    poll_response = PollResponse(
        poll_id=poll.id,
        user_id=user_id,
        response=response_text,
        created_at=datetime.now()
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –æ—Ç–≤–µ—Ç –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    existing_response = next(get_session()).query(PollResponse).filter(
        PollResponse.poll_id == poll.id,
        PollResponse.user_id == user_id
    ).first()

    if existing_response:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ—Ç–≤–µ—Ç
        existing_response.response = response_text
        existing_response.created_at = datetime.now()
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        next(get_session()).add(poll_response)

    next(get_session()).commit()

    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∏—á–Ω—ã–π –æ–ø—Ä–æ—Å –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª "–î–∞",
    # –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –µ–º—É –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
    if poll.status == 'initial' and response_text == "–î–∞":
        keyboard = [
            [InlineKeyboardButton("üë§ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data='register')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await context.bot.send_message(
            chat_id=user_id,
            text="–û—Ç–ª–∏—á–Ω–æ! –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ Random Coffee –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. "
                 "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:",
            reply_markup=reply_markup
        )


def get_next_monday(hour=10, minute=0):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞"""
    now = datetime.now()
    days_ahead = 7 - now.weekday()
    if days_ahead <= 0:
        days_ahead += 7
    next_monday = now + timedelta(days=days_ahead)
    return next_monday.replace(hour=hour, minute=minute, second=0, microsecond=0)


async def send_weekly_poll(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ–ø—Ä–æ—Å"""
    session = next(get_session())
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã
        active_chats = session.query(Chat).filter_by(is_active=True).all()

        for chat in active_chats:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–ø—Ä–æ—Å –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
            latest_poll = session.query(WeeklyPoll)\
                .filter_by(chat_id=chat.id)\
                .order_by(WeeklyPoll.created_at.desc())\
                .first()

            if not latest_poll:
                continue

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ "–î–∞"
            positive_responses = session.query(PollResponse)\
                .filter_by(poll_id=latest_poll.id, response=True)\
                .all()

            # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≥–æ—Ç–æ–≤—ã—Ö –∫ –≤—Å—Ç—Ä–µ—á–µ
            user_ids = [response.user_id for response in positive_responses]

            if len(user_ids) < 2:
                await context.bot.send_message(
                    chat_id=chat.chat_id,
                    text="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ."
                )
                continue

            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤—Å—Ç—Ä–µ—á
            past_meetings = session.query(Meeting)\
                .filter(Meeting.user1_id.in_(user_ids))\
                .filter(Meeting.user2_id.in_(user_ids))\
                .all()

            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –ø—Ä–æ—à–ª—ã—Ö –≤—Å—Ç—Ä–µ—á
            meeting_history = {}
            for meeting in past_meetings:
                if meeting.user1_id not in meeting_history:
                    meeting_history[meeting.user1_id] = set()
                if meeting.user2_id not in meeting_history:
                    meeting_history[meeting.user2_id] = set()
                meeting_history[meeting.user1_id].add(meeting.user2_id)
                meeting_history[meeting.user2_id].add(meeting.user1_id)

            # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            random.shuffle(user_ids)

            # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—ã —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏ –≤—Å—Ç—Ä–µ—á
            pairs = []
            unpaired = []
            used = set()

            for user1 in user_ids:
                if user1 in used:
                    continue

                # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
                best_partner = None
                min_meetings = float('inf')

                for user2 in user_ids:
                    if user2 == user1 or user2 in used:
                        continue

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤—Å—Ç—Ä–µ—á
                    meetings_count = len(meeting_history.get(
                        user1, set()).intersection({user2}))

                    if meetings_count < min_meetings:
                        min_meetings = meetings_count
                        best_partner = user2

                    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å –∫–æ—Ç–æ—Ä—ã–º –≤—Å—Ç—Ä–µ—á –Ω–µ –±—ã–ª–æ, —Å—Ä–∞–∑—É –±–µ—Ä–µ–º –µ–≥–æ
                    if meetings_count == 0:
                        break

                if best_partner:
                    pairs.append((user1, best_partner))
                    used.add(user1)
                    used.add(best_partner)
                else:
                    unpaired.append(user1)

            # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –Ω–µ–ø–∞—Ä–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–∞—Ä–µ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
            if unpaired:
                if pairs:
                    last_pair = pairs[-1]
                    pairs[-1] = (last_pair[0], last_pair[1], unpaired[0])
                else:
                    # –ï—Å–ª–∏ –ø–∞—Ä –Ω–µ—Ç —Å–æ–≤—Å–µ–º, —Å–æ–∑–¥–∞–µ–º –æ–¥–Ω—É –∏–∑ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è
                    pairs.append(tuple(unpaired))

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = "üéâ –ü–∞—Ä—ã –¥–ª—è –≤—Å—Ç—Ä–µ—á –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é:\n\n"

            for pair in pairs:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
                users = []
                for user_id in pair:
                    user = session.query(User).filter_by(
                        telegram_id=user_id).first()
                    if user:
                        users.append(
                            f"@{user.username}" if user.username else f"[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å](tg://user?id={user_id})")

                # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
                message += "üë• " + " –∏ ".join(users) + "\n"

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å—Ç—Ä–µ—á—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                if len(pair) == 2:
                    user1, user2 = pair
                    meeting = Meeting(
                        user1_id=user1,
                        user2_id=user2,
                        scheduled_time=datetime.utcnow(),
                        status='scheduled',
                        created_at=datetime.utcnow()
                    )
                    session.add(meeting)
                elif len(pair) == 3:
                    user1, user2, user3 = pair
                    meeting1 = Meeting(
                        user1_id=user1,
                        user2_id=user2,
                        scheduled_time=datetime.utcnow(),
                        status='scheduled',
                        created_at=datetime.utcnow()
                    )
                    meeting2 = Meeting(
                        user1_id=user2,
                        user2_id=user3,
                        scheduled_time=datetime.utcnow(),
                        status='scheduled',
                        created_at=datetime.utcnow()
                    )
                    meeting3 = Meeting(
                        user1_id=user1,
                        user2_id=user3,
                        scheduled_time=datetime.utcnow(),
                        status='scheduled',
                        created_at=datetime.utcnow()
                    )
                    session.add(meeting1)
                    session.add(meeting2)
                    session.add(meeting3)

            message += "\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–≥–æ–≤–æ—Ä–∏—Ç–µ—Å—å –æ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–µ –≤—Å—Ç—Ä–µ—á–∏ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö üòä"

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            session.commit()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —á–∞—Ç
            await context.bot.send_message(
                chat_id=chat.chat_id,
                text=message,
                parse_mode='Markdown'
            )
    except Exception as e:
        logger.error(f"Error sending poll to chat: {e}")


async def handle_new_chat_member(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –Ω–æ–≤—ã–π —á–∞—Ç"""
    if update.message.new_chat_members:
        for member in update.message.new_chat_members:
            if member.id == context.bot.id:
                # Bot was added to a new chat
                session = next(get_session())
                try:
                    chat = update.effective_chat
                    # Check if chat already exists
                    db_chat = session.query(Chat).filter_by(
                        chat_id=chat.id).first()
                    if not db_chat:
                        # Register new chat
                        db_chat = Chat(
                            chat_id=chat.id,
                            title=chat.title or str(chat.id),
                            is_active=True,
                            joined_at=datetime.utcnow()
                        )
                        session.add(db_chat)
                        session.commit()

                        await update.message.reply_text(
                            "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–±–∞–≤–∏–ª–∏ –º–µ–Ω—è! –Ø –±–æ—Ç –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–æ—Ñ–µ-–≤—Å—Ç—Ä–µ—á. "
                            "–Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ–ø—Ä–æ—Å—ã –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–∞—Ä—ã –¥–ª—è –≤—Å—Ç—Ä–µ—á. "
                            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
                        )
                except Exception as e:
                    logger.error(f"Error handling new chat member: {e}")
                finally:
                    session.close()


async def handle_left_chat_member(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–æ—Ç–∞ –∏–∑ —á–∞—Ç–∞"""
    if update.message.left_chat_member and update.message.left_chat_member.id == context.bot.id:
        # Bot was removed from the chat
        session = next(get_session())
        try:
            chat = update.effective_chat
            # Mark chat as inactive
            db_chat = session.query(Chat).filter_by(chat_id=chat.id).first()
            if db_chat:
                db_chat.is_active = False
                session.commit()
        except Exception as e:
            logger.error(f"Error handling left chat member: {e}")
        finally:
            session.close()


def is_bot_running():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞"""
    session = next(get_session())
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞
        running_instances = session.query(BotInstance).count()

        if running_instances > 0:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–∏ –ª–∏ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ 2 –º–∏–Ω—É—Ç)
            cutoff_time = datetime.utcnow() - timedelta(minutes=2)
            stale_instances = session.query(BotInstance).filter(
                BotInstance.last_heartbeat < cutoff_time
            ).all()

            # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏
            for instance in stale_instances:
                session.delete(instance)
            session.commit()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–ø–∏—Å–∏
            running_instances = session.query(BotInstance).count()
            if running_instances > 0:
                logger.warning(
                    f"Found {running_instances} running bot instances")
                return True
        return False
    except Exception as e:
        logger.error(f"Error checking bot instances: {e}")
        return True  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Ö—É–¥—à–µ–µ
    finally:
        session.close()


def register_bot_instance():
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞"""
    session = next(get_session())
    try:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –Ω–æ–≤–æ–º —ç–∫–∑–µ–º–ø–ª—è—Ä–µ
        instance = BotInstance(
            instance_id=str(uuid.uuid4()),
            last_heartbeat=datetime.utcnow()
        )
        session.add(instance)
        session.commit()
        logger.info(f"Registered new bot instance: {instance.instance_id}")
        return True
    except Exception as e:
        logger.error(f"Error registering bot instance: {e}")
        return False
    finally:
        session.close()


def update_heartbeat():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ heartbeat –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞"""
    session = next(get_session())
    try:
        latest_instance = session.query(BotInstance).order_by(
            BotInstance.last_heartbeat.desc()
        ).first()
        if latest_instance:
            latest_instance.last_heartbeat = datetime.utcnow()
            session.commit()
    except Exception as e:
        logger.error(f"Error updating heartbeat: {e}")
    finally:
        session.close()


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram"""
    logger.error("Exception while handling an update:", exc_info=context.error)

    if update and update.effective_message:
        error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        await update.effective_message.reply_text(error_message)


async def update_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    session = next(get_session())
    try:
        user = session.query(User).filter(
            User.telegram_id == update.effective_user.id).first()
        if not user:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return ConversationHandler.END

        user.city = update.message.text
        session.commit()

        keyboard = [[InlineKeyboardButton(
            "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='settings')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!", reply_markup=reply_markup)
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"Error in update_city: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞.")
        return ConversationHandler.END
    finally:
        session.close()


async def update_social_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ—Ü.—Å–µ—Ç—å"""
    session = next(get_session())
    try:
        user = session.query(User).filter(
            User.telegram_id == update.effective_user.id).first()
        if not user:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return ConversationHandler.END

        user.social_link = update.message.text
        session.commit()

        keyboard = [[InlineKeyboardButton(
            "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='settings')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ç—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=reply_markup)
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"Error in update_social_link: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏.")
        return ConversationHandler.END
    finally:
        session.close()


async def update_about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ"""
    session = next(get_session())
    try:
        user = session.query(User).filter(
            User.telegram_id == update.effective_user.id).first()
        if not user:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return ConversationHandler.END

        user.about = update.message.text
        session.commit()

        keyboard = [[InlineKeyboardButton(
            "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='settings')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–±–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=reply_markup)
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"Error in update_about: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
        return ConversationHandler.END
    finally:
        session.close()


async def update_job(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã"""
    session = next(get_session())
    try:
        user = session.query(User).filter(
            User.telegram_id == update.effective_user.id).first()
        if not user:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return ConversationHandler.END

        user.job = update.message.text
        session.commit()

        keyboard = [[InlineKeyboardButton(
            "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='settings')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=reply_markup)
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"Error in update_job: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã.")
        return ConversationHandler.END
    finally:
        session.close()


async def update_birth_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
    try:
        birth_date = datetime.strptime(update.message.text, "%d.%m.%Y")
        session = next(get_session())
        try:
            user = session.query(User).filter(
                User.telegram_id == update.effective_user.id).first()
            if not user:
                await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                return ConversationHandler.END

            user.birth_date = birth_date
            session.commit()

            keyboard = [[InlineKeyboardButton(
                "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='settings')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=reply_markup)
            return ConversationHandler.END
        except Exception as e:
            logger.error(f"Error in update_birth_date: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è.")
            return ConversationHandler.END
        finally:
            session.close()
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–î–î.–ú–ú.–ì–ì–ì–ì):")
        return SETTINGS_BIRTH_DATE


async def update_avatar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞"""
    if not update.message.photo:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é:")
        return SETTINGS_AVATAR

    session = next(get_session())
    try:
        user = session.query(User).filter(
            User.telegram_id == update.effective_user.id).first()
        if not user:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return ConversationHandler.END

        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ (—Å–∞–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ) —Ñ–æ—Ç–æ
        photo = update.message.photo[-1]
        user.avatar = photo.file_id
        session.commit()

        keyboard = [[InlineKeyboardButton(
            "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='settings')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!", reply_markup=reply_markup)
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"Error in update_avatar: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞.")
        return ConversationHandler.END
    finally:
        session.close()


async def update_hobbies(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ö–æ–±–±–∏"""
    session = next(get_session())
    try:
        user = session.query(User).filter(
            User.telegram_id == update.effective_user.id).first()
        if not user:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return ConversationHandler.END

        user.hobbies = update.message.text
        session.commit()

        keyboard = [[InlineKeyboardButton(
            "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='settings')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–•–æ–±–±–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", reply_markup=reply_markup)
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"Error in update_hobbies: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ö–æ–±–±–∏.")
        return ConversationHandler.END
    finally:
        session.close()


async def settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    query = update.callback_query
    await query.answer()

    session = next(get_session())
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = session.query(User).filter(
            User.telegram_id == query.from_user.id).first()
        if not user:
            await query.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
            return ConversationHandler.END

        keyboard = [
            [
                InlineKeyboardButton("üèô –ì–æ—Ä–æ–¥", callback_data='settings_city'),
                InlineKeyboardButton(
                    "üîó –°–æ—Ü.—Å–µ—Ç—å", callback_data='settings_social_link')
            ],
            [
                InlineKeyboardButton(
                    "‚ÑπÔ∏è –û —Å–µ–±–µ", callback_data='settings_about'),
                    InlineKeyboardButton(
                        "üíº –†–∞–±–æ—Ç–∞", callback_data='settings_job')
                ],
                [
                    InlineKeyboardButton(
                        "üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", callback_data='settings_birth_date'),
                        InlineKeyboardButton(
                            "üñº –ê–≤–∞—Ç–∞—Ä", callback_data='settings_avatar')
                    ],
                    [
                        InlineKeyboardButton(
                            "üéØ –•–æ–±–±–∏", callback_data='settings_hobbies'),
                            InlineKeyboardButton(
                                "üëÅ –í–∏–¥–∏–º–æ—Å—Ç—å", callback_data='settings_visibility')
                        ],
                        [
                            InlineKeyboardButton(
                                "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')
                        ]
                    ]
                ]
                reply_markup= InlineKeyboardMarkup(keyboard)

                settings_text= (
                    "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:\n\n"
                    f"üèô –ì–æ—Ä–æ–¥: {user.city or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                    f"üîó –°–æ—Ü.—Å–µ—Ç—å: {user.social_link or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
                    f"‚ÑπÔ∏è –û —Å–µ–±–µ: {user.about or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                    f"üíº –†–∞–±–æ—Ç–∞: {user.job or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
                    f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user.birth_date.strftime('%d.%m.%Y') if user.birth_date else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
                    f"üéØ –•–æ–±–±–∏: {user.hobbies or '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}\n"
                    f"üëÅ –í–∏–¥–∏–º–æ—Å—Ç—å: {'–ü—É–±–ª–∏—á–Ω—ã–π' if user.is_visible else '–ü—Ä–∏–≤–∞—Ç–Ω—ã–π'}"
                )

                await query.message.reply_text(settings_text, reply_markup=reply_markup)
                return ConversationHandler.END
            except Exception as e:
                logger.error(f"Error in settings: {e}")
                await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
                return ConversationHandler.END
            finally:
                session.close()


async def update_visibility(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
    query = update.callback_query
    await query.answer()
    
    session = next(get_session())
    try:
        user = session.query(User).filter(User.telegram_id == query.from_user.id).first()
        if not user:
            await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return ConversationHandler.END

        visibility = query.data.split('_')[1]  # 'public' –∏–ª–∏ 'private'
        user.is_visible = (visibility == 'public')
        session.commit()

        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='settings')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        visibility_text = "–ü—É–±–ª–∏—á–Ω—ã–π" if user.is_visible else "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π"
        await query.message.reply_text(
            f"‚úÖ –í–∏–¥–∏–º–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {visibility_text}",
            reply_markup=reply_markup
        )
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"Error in update_visibility: {e}")
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—è.")
        return ConversationHandler.END
    finally:
        session.close()


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    if is_bot_running():
        logger.error("Another instance of the bot is already running")
        sys.exit(1)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
    if not register_bot_instance():
        logger.error("Failed to register bot instance")
        sys.exit(1)

    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)

        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        conv_handler = ConversationHandler(
            entry_points=[CallbackQueryHandler(
                register, pattern='^register$')],
            states={
                ENTER_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_name)],
                ENTER_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_city)],
                ENTER_SOCIAL_LINK: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_social_link)],
                ENTER_ABOUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_about)],
                ENTER_JOB: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_job)],
                ENTER_BIRTH_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_birth_date)],
                ENTER_AVATAR: [MessageHandler(filters.PHOTO, enter_avatar)],
                ENTER_HOBBIES: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_hobbies)],
            },
            fallbacks=[CommandHandler('cancel', start)],
            per_chat=True,
            per_user=True,
            per_message=True
        )

        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_handler = ConversationHandler(
            entry_points=[CallbackQueryHandler(settings, pattern='^settings$')],
            states={
                SETTINGS_CITY: [
                    CallbackQueryHandler(lambda u, c: u.callback_query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:"), pattern='^settings_city$'),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, update_city)
                ],
                SETTINGS_SOCIAL_LINK: [
                    CallbackQueryHandler(lambda u, c: u.callback_query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à—É —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ç—å:"), pattern='^settings_social_link$'),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, update_social_link)
                ],
                SETTINGS_ABOUT: [
                    CallbackQueryHandler(lambda u, c: u.callback_query.message.reply_text("–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ:"), pattern='^settings_about$'),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, update_about)
                ],
                SETTINGS_JOB: [
                    CallbackQueryHandler(lambda u, c: u.callback_query.message.reply_text("–ö–µ–º –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?"), pattern='^settings_job$'),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, update_job)
                ],
                SETTINGS_BIRTH_DATE: [
                    CallbackQueryHandler(lambda u, c: u.callback_query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):"), pattern='^settings_birth_date$'),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, update_birth_date)
                ],
                SETTINGS_AVATAR: [
                    CallbackQueryHandler(lambda u, c: u.callback_query.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞:"), pattern='^settings_avatar$'),
                    MessageHandler(filters.PHOTO, update_avatar)
                ],
                SETTINGS_HOBBIES: [
                    CallbackQueryHandler(lambda u, c: u.callback_query.message.reply_text("–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–∏—Ö —Ö–æ–±–±–∏:"), pattern='^settings_hobbies$'),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, update_hobbies)
                ],
                SETTINGS_VISIBILITY: [
                    CallbackQueryHandler(lambda u, c: u.callback_query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–∏–º–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è:", reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("–ü—É–±–ª–∏—á–Ω—ã–π", callback_data='visibility_public')],
                        [InlineKeyboardButton("–ü—Ä–∏–≤–∞—Ç–Ω—ã–π", callback_data='visibility_private')]
                    ])), pattern='^settings_visibility$'),
                    CallbackQueryHandler(lambda u, c: update_visibility(u, c), pattern='^visibility_')
                ]
            },
            fallbacks=[CallbackQueryHandler(settings, pattern='^back_to_main$')],
            per_chat=True,
            per_user=True,
            per_message=True
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("stats", stats))
        application.add_handler(CallbackQueryHandler(button_handler))

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        application.add_handler(conv_handler)
        application.add_handler(settings_handler)

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —á–∞—Ç–µ
        application.add_handler(MessageHandler(
            filters.ALL, handle_new_chat_member))
        application.add_handler(MessageHandler(
            filters.ALL, handle_left_chat_member))

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ–ø—Ä–æ—Å—ã
        application.add_handler(PollAnswerHandler(handle_poll_answer))

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤
        if application.job_queue:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø—Ä–æ—Å –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 10:00
            application.job_queue.run_repeating(
                send_weekly_poll,
                interval=timedelta(days=7),
                first=get_next_monday()
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —Å–æ–∑–¥–∞–µ–º –ø–∞—Ä—ã –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 17:00
            application.job_queue.run_repeating(
                distribute_pairs,
                interval=timedelta(days=7),
                first=get_next_monday(hour=17)
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ heartbeat
            application.job_queue.run_repeating(
                update_heartbeat,
                interval=timedelta(minutes=1)
            )

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("Bot is starting...")
        application.run_polling(
            allowed_updates=Update.ALL_TYPES,
            drop_pending_updates=True  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        )
    except Exception as e:
        logger.error(f"Error in main: {e}")
        raise
    finally:
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —Ç–µ–∫—É—â–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä–µ
        session = next(get_session())
        try:
            latest_instance = session.query(BotInstance).order_by(
                BotInstance.last_heartbeat.desc()
            ).first()
            if latest_instance:
                session.delete(latest_instance)
                session.commit()
                logger.info("Bot instance record removed")
        except Exception as e:
            logger.error(f"Error removing bot instance: {e}")
        finally:
            session.close()


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        logger.error(f"Error: {e}")
