import os
import logging
import random
from datetime import datetime, timedelta
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Poll, Bot, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes, ConversationHandler
from database import init_db, User, UserPreferences, Meeting, Rating, WeeklyPoll, PollResponse

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
if not TELEGRAM_BOT_TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN not found in environment variables")

GROUP_CHAT_ID = os.getenv('GROUP_CHAT_ID')
if not GROUP_CHAT_ID:
    raise ValueError("GROUP_CHAT_ID not found in environment variables")

# –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º GROUP_CHAT_ID –≤ int
GROUP_CHAT_ID = int(GROUP_CHAT_ID)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = init_db()

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
(
    ENTER_NAME,
    ENTER_AGE,
    ENTER_GENDER,
    ENTER_PROFESSION,
    ENTER_INTERESTS,
    ENTER_LANGUAGE,
    ENTER_MEETING_TIME,
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    SETTINGS_GENDER,
    SETTINGS_AGE_MIN,
    SETTINGS_AGE_MAX,
    SETTINGS_LANGUAGE,
    SETTINGS_INTERESTS,
    SETTINGS_TIME
) = range(13)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á
active_meetings = {}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_id = update.effective_user.id
    # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

    keyboard = [
        [
            InlineKeyboardButton("üë§ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data='register'),
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='settings')
        ],
        [
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats'),
            InlineKeyboardButton("‚ùì FAQ", callback_data='faq')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç Random Coffee. –Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏ –∑–∞ –∫–æ—Ñ–µ.\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'.",
        reply_markup=reply_markup
    )
    return ConversationHandler.END


async def register(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    query = update.callback_query
    await query.answer()

    await query.message.reply_text(
        "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n"
        "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? (–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è)"
    )
    return ENTER_NAME


async def enter_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
    context.user_data['name'] = update.message.text

    await update.message.reply_text(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ)"
    )
    return ENTER_AGE


async def enter_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    try:
        age = int(update.message.text)
        if age < 18 or age > 100:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 18 –¥–æ 100)")
            return ENTER_AGE

        context.user_data['age'] = age

        keyboard = [
            [KeyboardButton("–ú—É–∂—Å–∫–æ–π"), KeyboardButton("–ñ–µ–Ω—Å–∫–∏–π")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)

        await update.message.reply_text(
            "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
            reply_markup=reply_markup
        )
        return ENTER_GENDER
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return ENTER_AGE


async def enter_gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª–∞"""
    gender = update.message.text
    if gender not in ["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"]:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏")
        return ENTER_GENDER

    context.user_data['gender'] = gender

    await update.message.reply_text(
        "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –∏–ª–∏ —Ä–æ–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:"
    )
    return ENTER_PROFESSION


async def enter_profession(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏"""
    context.user_data['profession'] = update.message.text

    await update.message.reply_text(
        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, —Å–ø–æ—Ä—Ç, –º—É–∑—ã–∫–∞)"
    )
    return ENTER_INTERESTS


async def enter_interests(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
    context.user_data['interests'] = update.message.text

    keyboard = [
        [KeyboardButton("–†—É—Å—Å–∫–∏–π"), KeyboardButton("English")],
        [KeyboardButton("–†—É—Å—Å–∫–∏–π + English")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)

    await update.message.reply_text(
        "–ù–∞ –∫–∞–∫–æ–º —è–∑—ã–∫–µ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è?",
        reply_markup=reply_markup
    )
    return ENTER_LANGUAGE


async def enter_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —è–∑—ã–∫–∞"""
    context.user_data['language'] = update.message.text

    keyboard = [
        [KeyboardButton("–£—Ç—Ä–æ"), KeyboardButton("–î–µ–Ω—å")],
        [KeyboardButton("–í–µ—á–µ—Ä"), KeyboardButton("–õ—é–±–æ–µ –≤—Ä–µ–º—è")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)

    await update.message.reply_text(
        "–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –≤–∞–º —É–¥–æ–±–Ω–æ –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è?",
        reply_markup=reply_markup
    )
    return ENTER_MEETING_TIME


async def enter_meeting_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    context.user_data['meeting_time'] = update.message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
    user = User(
        telegram_id=update.effective_user.id,
        nickname=context.user_data['name'],
        age=context.user_data['age'],
        gender=context.user_data['gender'],
        profession=context.user_data['profession'],
        interests=context.user_data['interests'],
        language=context.user_data['language'],
        meeting_time=context.user_data['meeting_time'],
        created_at=datetime.now()
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    existing_user = db.query(User).filter(
        User.telegram_id == update.effective_user.id).first()
    if existing_user:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        existing_user.nickname = user.nickname
        existing_user.age = user.age
        existing_user.gender = user.gender
        existing_user.profession = user.profession
        existing_user.interests = user.interests
        existing_user.language = user.language
        existing_user.meeting_time = user.meeting_time
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.add(user)

    db.commit()

    profile_text = (
        "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
        f"üë§ –ò–º—è: {context.user_data['name']}\n"
        f"üìÖ –í–æ–∑—Ä–∞—Å—Ç: {context.user_data['age']}\n"
        f"‚öß –ü–æ–ª: {context.user_data['gender']}\n"
        f"üíº –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {context.user_data['profession']}\n"
        f"üéØ –ò–Ω—Ç–µ—Ä–µ—Å—ã: {context.user_data['interests']}\n"
        f"üó£ –Ø–∑—ã–∫ –æ–±—â–µ–Ω–∏—è: {context.user_data['language']}\n"
        f"üïí –£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è: {context.user_data['meeting_time']}"
    )

    keyboard = [
        [
            InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data='profile'),
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='settings')
        ],
        [
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats'),
            InlineKeyboardButton("‚ùì FAQ", callback_data='faq')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(profile_text, reply_markup=reply_markup)
    return ConversationHandler.END


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()

    if query.data == 'register':
        await register(update, context)
    elif query.data == 'profile':
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user = db.query(User).filter(
            User.telegram_id == query.from_user.id).first()
        if user:
            profile_text = (
                "üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
                f"üë§ –ò–º—è: {user.nickname}\n"
                f"üìÖ –í–æ–∑—Ä–∞—Å—Ç: {user.age}\n"
                f"‚öß –ü–æ–ª: {user.gender}\n"
                f"üíº –ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {user.profession}\n"
                f"üéØ –ò–Ω—Ç–µ—Ä–µ—Å—ã: {user.interests}\n"
                f"üó£ –Ø–∑—ã–∫ –æ–±—â–µ–Ω–∏—è: {user.language}\n"
                f"üïí –£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è: {user.meeting_time}\n"
                f"üìÜ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at.strftime('%d.%m.%Y')}"
            )
        else:
            profile_text = "üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å."

        await query.message.reply_text(profile_text)
    elif query.data == 'settings':
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.query(User).filter(
            User.telegram_id == query.from_user.id).first()
        if not user:
            await query.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
            return

        preferences = db.query(UserPreferences).filter(
            UserPreferences.user_id == user.id).first()

        keyboard = [
            [
                InlineKeyboardButton("üë• –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –ø–æ–ª",
                                     callback_data='set_gender'),
                InlineKeyboardButton(
                    "üìÖ –í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω", callback_data='set_age')
            ],
            [
                InlineKeyboardButton(
                    "üó£ –Ø–∑—ã–∫ –æ–±—â–µ–Ω–∏—è", callback_data='set_language'),
                InlineKeyboardButton(
                    "üéØ –ò–Ω—Ç–µ—Ä–µ—Å—ã", callback_data='set_interests')
            ],
            [
                InlineKeyboardButton(
                    "üïí –£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è", callback_data='set_time'),
                InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                                     callback_data='reset_settings')
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        settings_text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–±–æ—Ä–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤:\n\n"
        if preferences:
            settings_text += (
                f"üë• –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –ø–æ–ª: {preferences.preferred_gender or '–õ—é–±–æ–π'}\n"
                f"üìÖ –í–æ–∑—Ä–∞—Å—Ç: {preferences.age_range_min or '18'}-{preferences.age_range_max or '100'} –ª–µ—Ç\n"
                f"üó£ –Ø–∑—ã–∫ –æ–±—â–µ–Ω–∏—è: {preferences.preferred_languages or '–õ—é–±–æ–π'}\n"
                f"üéØ –ò–Ω—Ç–µ—Ä–µ—Å—ã: {preferences.preferred_interests or '–õ—é–±—ã–µ'}\n"
                f"üïí –£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è: {preferences.preferred_meeting_times or '–õ—é–±–æ–µ'}\n"
            )
        else:
            settings_text += "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∫–∞ –Ω–µ –∑–∞–¥–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π."

        await query.message.reply_text(settings_text, reply_markup=reply_markup)
    elif query.data.startswith('set_'):
        # –ø–æ–ª—É—á–∞–µ–º —Ç–∏–ø –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (gender, age, language –∏ —Ç.–¥.)
        setting_type = query.data[4:]
        await handle_settings(update, context, setting_type)
    elif query.data == 'reset_settings':
        await reset_settings(update, context)
    elif query.data == 'stats':
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.query(User).filter(
            User.telegram_id == query.from_user.id).first()
        if user:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤—Å—Ç—Ä–µ—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            total_meetings = len(user.meetings_as_user1) + \
                len(user.meetings_as_user2)
            completed_meetings = db.query(Meeting).filter(
                ((Meeting.user1_id == user.id) | (Meeting.user2_id == user.id)) &
                (Meeting.status == 'completed')
            ).count()

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
            ratings = db.query(Rating).filter(
                Rating.to_user_id == user.id).all()
            avg_rating = sum([r.rating for r in ratings]) / \
                len(ratings) if ratings else 0

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞
            experience_level = "üå± –ù–æ–≤–∏—á–æ–∫"
            if total_meetings >= 10:
                experience_level = "üåø –†–µ–≥—É–ª—è—Ä"
            if total_meetings >= 20:
                experience_level = "üå≥ –≠–∫—Å–ø–µ—Ä—Ç"

            stats_text = (
                "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
                f"üë• –í—Å–µ–≥–æ –≤—Å—Ç—Ä–µ—á: {total_meetings}\n"
                f"‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á: {completed_meetings}\n"
                f"‚≠êÔ∏è –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {avg_rating:.1f}\n"
                f"üìà –£—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞: {experience_level}\n"
                f"üìÖ –í –∫–ª—É–±–µ —Å: {user.created_at.strftime('%d.%m.%Y')}\n\n"
                "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n"
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            if total_meetings >= 1:
                stats_text += "üéØ –ü–µ—Ä–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞\n"
            if total_meetings >= 5:
                stats_text += "üî• 5 –≤—Å—Ç—Ä–µ—á\n"
            if total_meetings >= 10:
                stats_text += "üí´ 10 –≤—Å—Ç—Ä–µ—á\n"
            if total_meetings >= 20:
                stats_text += "üåü 20 –≤—Å—Ç—Ä–µ—á\n"
            if avg_rating >= 4.5:
                stats_text += "‚≠êÔ∏è –û—Ç–ª–∏—á–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫\n"

        else:
            stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å."

        await query.message.reply_text(stats_text)
    elif query.data == 'faq':
        await query.message.reply_text(
            "‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n\n"
            "1. –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?\n"
            "   - –ö–∞–∂–¥—É—é –ø—è—Ç–Ω–∏—Ü—É –±–æ—Ç —Å–æ–∑–¥–∞–µ—Ç –æ–ø—Ä–æ—Å —É—á–∞—Å—Ç–∏—è\n"
            "   - –í –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–µ –ø–∞—Ä—ã\n"
            "   - –£—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞—é—Ç—Å—è –æ –≤—Å—Ç—Ä–µ—á–µ\n\n"
            "2. –ö–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è?\n"
            "   - –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'\n"
            "   - –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É\n\n"
            "3. –ö–∞–∫ –æ—Ç–º–µ–Ω–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É?\n"
            "   - –°–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º –≤ —á–∞—Ç–µ —Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º\n"
            "   - –î–æ–∂–¥–∏—Ç–µ—Å—å —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è"
        )


async def create_weekly_poll(context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–∑–¥–∞–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ–ø—Ä–æ—Å"""
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–ø—Ä–æ—Å
    poll = WeeklyPoll(
        week_start=datetime.now() + timedelta(days=1),
        week_end=datetime.now() + timedelta(days=7),
        status='active'
    )
    db.add(poll)
    db.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø—Ä–æ—Å –≤ —á–∞—Ç
    message = await context.bot.send_poll(
        chat_id=GROUP_CHAT_ID,
        question="–ü—Ä–∏–≤–µ—Ç, –±—É–¥–µ—à—å —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤–æ –≤—Å—Ç—Ä–µ—á–∞—Ö Random Coffee –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ? ‚òïÔ∏è",
        options=["–î–∞", "–ù–µ—Ç"],
        is_anonymous=False
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    poll.message_id = message.message_id
    db.commit()


async def distribute_pairs(context: ContextTypes.DEFAULT_TYPE):
    """–†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–∞—Ä—ã –¥–ª—è –≤—Å—Ç—Ä–µ—á"""
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –æ–ø—Ä–æ—Å
    poll = db.query(WeeklyPoll).filter(
        WeeklyPoll.status == 'active',
        WeeklyPoll.week_start <= datetime.now()
    ).first()

    if not poll:
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    responses = db.query(PollResponse).filter(
        PollResponse.poll_id == poll.id,
        PollResponse.response == True
    ).all()

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_ids = [response.user_id for response in responses]
    users = db.query(User).filter(User.id.in_(user_ids)).all()

    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    random.shuffle(users)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä—ã
    pairs = []
    for i in range(0, len(users)-1, 2):
        pairs.append((users[i], users[i+1]))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–∞–º–∏
    pairs_text = "–ü–∞—Ä—ã –¥–ª—è –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–ª—É–± \"–¢–≠–ú–ü\" ‚Üí –†–∞–Ω–¥–æ–º-–ö–æ—Ñ–µ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω—ã! –ò—â–∏ –≤ —Å–ø–∏—Å–∫–µ –Ω–∏–∂–µ, —Å –∫–µ–º –≤—Å—Ç—Ä–µ—á–∞–µ—à—å—Å—è –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ:\n\n"

    for user1, user2 in pairs:
        pairs_text += f"üë• {user1.nickname} ‚ÜîÔ∏è {user2.nickname}\n"

    pairs_text += "\n‚û™ –ù–∞–ø–∏—à–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É –≤ –ª–∏—á–∫—É, —á—Ç–æ–±—ã –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è –æ–± —É–¥–æ–±–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–µ –≤—Å—Ç—Ä–µ—á–∏ ‚òïÔ∏è"

    await context.bot.send_message(
        chat_id=GROUP_CHAT_ID,
        text=pairs_text
    )

    # –°–æ–∑–¥–∞–µ–º –≤—Å—Ç—Ä–µ—á–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    for user1, user2 in pairs:
        meeting = Meeting(
            user1_id=user1.id,
            user2_id=user2.id,
            status='active'
        )
        db.add(meeting)

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–ø—Ä–æ—Å
    poll.status = 'completed'
    db.commit()


async def handle_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    query = update.callback_query
    setting_type = query.data[4:]

    if setting_type == 'gender':
        keyboard = [
            [KeyboardButton("–ú—É–∂—Å–∫–æ–π"), KeyboardButton("–ñ–µ–Ω—Å–∫–∏–π")],
            [KeyboardButton("–õ—é–±–æ–π")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –ø–æ–ª —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:", reply_markup=reply_markup)
        return SETTINGS_GENDER

    elif setting_type == 'age':
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ (–æ—Ç 18):")
        return SETTINGS_AGE_MIN

    elif setting_type == 'language':
        keyboard = [
            [KeyboardButton("–†—É—Å—Å–∫–∏–π"), KeyboardButton("English")],
            [KeyboardButton("–†—É—Å—Å–∫–∏–π + English"), KeyboardButton("–õ—é–±–æ–π")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —è–∑—ã–∫ –æ–±—â–µ–Ω–∏—è:", reply_markup=reply_markup)
        return SETTINGS_LANGUAGE

    elif setting_type == 'interests':
        await query.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å —Ç–µ–º—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n"
            "(–Ω–∞–ø—Ä–∏–º–µ—Ä: –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, —Å–ø–æ—Ä—Ç, –º—É–∑—ã–∫–∞)\n"
            "–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–õ—é–±—ã–µ':"
        )
        return SETTINGS_INTERESTS

    elif setting_type == 'time':
        keyboard = [
            [KeyboardButton("–£—Ç—Ä–æ"), KeyboardButton("–î–µ–Ω—å")],
            [KeyboardButton("–í–µ—á–µ—Ä"), KeyboardButton("–õ—é–±–æ–µ –≤—Ä–µ–º—è")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≤—Å—Ç—Ä–µ—á:", reply_markup=reply_markup)
        return SETTINGS_TIME


async def reset_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    user = db.query(User).filter(
        User.telegram_id == query.from_user.id).first()
    if user:
        preferences = db.query(UserPreferences).filter(
            UserPreferences.user_id == user.id).first()
        if preferences:
            db.delete(preferences)
            db.commit()
            await query.message.reply_text("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã!")
        else:
            await query.message.reply_text("‚ÑπÔ∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
    else:
        await query.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")


async def save_gender_preference(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–≥–æ –ø–æ–ª–∞"""
    user = db.query(User).filter(User.telegram_id ==
                                 update.effective_user.id).first()
    if not user:
        await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
        return ConversationHandler.END

    preferences = db.query(UserPreferences).filter(
        UserPreferences.user_id == user.id).first()
    if not preferences:
        preferences = UserPreferences(user_id=user.id)
        db.add(preferences)

    preferences.preferred_gender = update.message.text
    db.commit()

    await update.message.reply_text(f"‚úÖ –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –ø–æ–ª —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {update.message.text}")
    return ConversationHandler.END


async def save_age_min_preference(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    try:
        age = int(update.message.text)
        if age < 18 or age > 100:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 18 –¥–æ 100)")
            return SETTINGS_AGE_MIN

        context.user_data['min_age'] = age
        await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:")
        return SETTINGS_AGE_MAX
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return SETTINGS_AGE_MIN


async def save_age_max_preference(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    try:
        age = int(update.message.text)
        min_age = context.user_data.get('min_age', 18)

        if age < min_age or age > 100:
            await update.message.reply_text(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç {min_age} –¥–æ 100)")
            return SETTINGS_AGE_MAX

        user = db.query(User).filter(User.telegram_id ==
                                     update.effective_user.id).first()
        if not user:
            await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
            return ConversationHandler.END

        preferences = db.query(UserPreferences).filter(
            UserPreferences.user_id == user.id).first()
        if not preferences:
            preferences = UserPreferences(user_id=user.id)
            db.add(preferences)

        preferences.age_range_min = min_age
        preferences.age_range_max = age
        db.commit()

        await update.message.reply_text(
            f"‚úÖ –í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {min_age}-{age} –ª–µ—Ç"
        )
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return SETTINGS_AGE_MAX


async def save_language_preference(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–≥–æ —è–∑—ã–∫–∞"""
    user = db.query(User).filter(User.telegram_id ==
                                 update.effective_user.id).first()
    if not user:
        await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
        return ConversationHandler.END

    preferences = db.query(UserPreferences).filter(
        UserPreferences.user_id == user.id).first()
    if not preferences:
        preferences = UserPreferences(user_id=user.id)
        db.add(preferences)

    preferences.preferred_languages = update.message.text
    db.commit()

    await update.message.reply_text(f"‚úÖ –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —è–∑—ã–∫ –æ–±—â–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {update.message.text}")
    return ConversationHandler.END


async def save_interests_preference(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
    user = db.query(User).filter(User.telegram_id ==
                                 update.effective_user.id).first()
    if not user:
        await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
        return ConversationHandler.END

    preferences = db.query(UserPreferences).filter(
        UserPreferences.user_id == user.id).first()
    if not preferences:
        preferences = UserPreferences(user_id=user.id)
        db.add(preferences)

    preferences.preferred_interests = update.message.text
    db.commit()

    await update.message.reply_text(f"‚úÖ –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {update.message.text}")
    return ConversationHandler.END


async def save_time_preference(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    user = db.query(User).filter(User.telegram_id ==
                                 update.effective_user.id).first()
    if not user:
        await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
        return ConversationHandler.END

    preferences = db.query(UserPreferences).filter(
        UserPreferences.user_id == user.id).first()
    if not preferences:
        preferences = UserPreferences(user_id=user.id)
        db.add(preferences)

    preferences.preferred_meeting_times = update.message.text
    db.commit()

    await update.message.reply_text(f"‚úÖ –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–µ –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {update.message.text}")
    return ConversationHandler.END


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(register, pattern='^register$')],
        states={
            ENTER_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_name)],
            ENTER_AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_age)],
            ENTER_GENDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_gender)],
            ENTER_PROFESSION: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_profession)],
            ENTER_INTERESTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_interests)],
            ENTER_LANGUAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_language)],
            ENTER_MEETING_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_meeting_time)],
        },
        fallbacks=[CommandHandler('cancel', start)]
    )

    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    settings_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(handle_settings, pattern='^set_')],
        states={
            SETTINGS_GENDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_gender_preference)],
            SETTINGS_AGE_MIN: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_age_min_preference)],
            SETTINGS_AGE_MAX: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_age_max_preference)],
            SETTINGS_LANGUAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_language_preference)],
            SETTINGS_INTERESTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_interests_preference)],
            SETTINGS_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_time_preference)],
        },
        fallbacks=[CommandHandler('cancel', start)]
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("stats", stats))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    application.add_handler(conv_handler)
    application.add_handler(settings_handler)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤
    job_queue = application.job_queue
    if job_queue:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø—Ä–æ—Å –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 10:00
        job_queue.run_repeating(send_weekly_poll, interval=timedelta(days=7),
                                first=get_next_monday(), context=None)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —Å–æ–∑–¥–∞–µ–º –ø–∞—Ä—ã –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 17:00
        job_queue.run_repeating(create_pairs, interval=timedelta(days=7),
                                first=get_next_monday(hour=17), context=None)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
